---
title: "Garbage Can Regression Challenge"
format:
  html: default
execute:
  echo: true
  eval: true
---

# Garbage Can Regression Challenge

**Choose R or Python and delete the other code chunk.**


## R Code

```{r}
#| echo: false
# Load required packages (install if needed)
if (!require(ggplot2, quietly = TRUE)) {
  install.packages("ggplot2", repos = "https://cran.rstudio.com/")
  library(ggplot2)
}
if (!require(broom, quietly = TRUE)) {
  install.packages("broom", repos = "https://cran.rstudio.com/")
  library(broom)
}

# Data with known true relationships: Anxiety = Stress + 0.1 × Time
observDF <- data.frame(
  Stress = c(0,0,0,1,1,1,2,2,2,8,8,8,12,12,12),
  StressSurvey = c(0,0,0,3,3,3,6,6,6,9,9,9,12,12,12),
  Time = c(0,1,1,1,1,1,2,2,2,2,2,2.1,2.2,2.2,2.2),
  Anxiety = c(0,0.1,0.1,1.1,1.1,1.1,2.2,2.2,2.2,8.2,8.2,8.21,12.22,12.22,12.22)
)

observDF
```

## Bivariate Regression Analysis

### Regression of Anxiety on Stress Survey

```{r}
#| echo: false
# Fit the bivariate regression model
model1 <- lm(Anxiety ~ StressSurvey, data = observDF)

# Display the regression results
summary(model1)
```

### Regression Output Interpretation

```{r}
#| echo: false
# Extract key statistics
cat("R-squared:", round(summary(model1)$r.squared, 4), "\n")
cat("Adjusted R-squared:", round(summary(model1)$adj.r.squared, 4), "\n")
cat("F-statistic:", round(summary(model1)$fstatistic[1], 4), "\n")
cat("p-value:", format.pval(pf(summary(model1)$fstatistic[1], 
                               summary(model1)$fstatistic[2], 
                               summary(model1)$fstatistic[3], 
                               lower.tail = FALSE)), "\n")
```

### Scatter Plot with Regression Line

```{r}
#| echo: false
# Create scatter plot with regression line
# Use base R plotting (more reliable)
plot(observDF$StressSurvey, observDF$Anxiety, 
     main = "Bivariate Regression: Anxiety vs Stress Survey",
     xlab = "Stress Survey", ylab = "Anxiety",
     pch = 16, col = "blue", cex = 1.2)
abline(model1, col = "red", lwd = 2)

# Add confidence interval
newx <- seq(min(observDF$StressSurvey), max(observDF$StressSurvey), length.out = 100)
pred <- predict(model1, newdata = data.frame(StressSurvey = newx), interval = "confidence")
lines(newx, pred[,2], col = "red", lty = 2)
lines(newx, pred[,3], col = "red", lty = 2)

# Save the plot
png("anxiety_stress_regression.png", width = 800, height = 600, res = 100)
plot(observDF$StressSurvey, observDF$Anxiety, 
     main = "Bivariate Regression: Anxiety vs Stress Survey",
     xlab = "Stress Survey", ylab = "Anxiety",
     pch = 16, col = "blue", cex = 1.2)
abline(model1, col = "red", lwd = 2)
lines(newx, pred[,2], col = "red", lty = 2)
lines(newx, pred[,3], col = "red", lty = 2)
dev.off()
```

### Reference to Saved Plot

```{r}
#| echo: false
# Check if the plot file exists and display information about it
if (file.exists("anxiety_stress_regression.png")) {
  cat("✓ Plot successfully saved as: anxiety_stress_regression.png\n")
  cat("File size:", round(file.size("anxiety_stress_regression.png") / 1024, 2), "KB\n")
  cat("Full path:", normalizePath("anxiety_stress_regression.png"), "\n")
} else {
  cat("⚠ Plot file not found. Please run the plotting code above first.\n")
}
```

### Estimated Coefficients

```{r}
#| echo: false
# Print the estimated coefficients
cat("Estimated Coefficients:\n")
cat("Intercept (β₀):", round(coef(model1)[1], 4), "\n")
cat("StressSurvey (β₁):", round(coef(model1)[2], 4), "\n")
cat("\nRegression Equation: Anxiety =", round(coef(model1)[1], 4), "+", round(coef(model1)[2], 4), "× StressSurvey\n")
```

### Comparison with True Relationships

```{r}
#| echo: false
# True relationship from the data generation: Anxiety = Stress + 0.1 × Time
# But we're regressing Anxiety on StressSurvey, not Stress

# Extract true coefficients for comparison
true_intercept <- 0  # In the true model: Anxiety = Stress + 0.1 × Time (no intercept)
true_slope_stress <- 1  # True coefficient for Stress in the generating equation

# Get estimated coefficients
est_intercept <- coef(model1)[1]
est_slope_stresssurvey <- coef(model1)[2]

cat("COMPARISON: Estimated vs True Relationships\n")
cat("==========================================\n")
cat("True generating equation: Anxiety = Stress + 0.1 × Time\n")
cat("Estimated equation: Anxiety =", round(est_intercept, 4), "+", round(est_slope_stresssurvey, 4), "× StressSurvey\n\n")

cat("Coefficient Analysis:\n")
cat("--------------------\n")
cat("Intercept:\n")
cat("  True (in generating model): 0\n")
cat("  Estimated:", round(est_intercept, 4), "\n")
cat("  Difference:", round(est_intercept - 0, 4), "\n\n")

cat("Slope coefficient:\n")
cat("  True (Stress coefficient): 1.0\n")
cat("  Estimated (StressSurvey):", round(est_slope_stresssurvey, 4), "\n")
cat("  Difference:", round(est_slope_stresssurvey - 1.0, 4), "\n\n")

cat("Note: We're comparing StressSurvey coefficient to true Stress coefficient\n")
cat("StressSurvey values are 3x larger than Stress values in this dataset\n")
cat("So the estimated coefficient should be approximately 1/3 =", round(1/3, 4), "\n")
cat("Actual ratio:", round(est_slope_stresssurvey, 4), "\n")
```

## Your Analysis

Follow the challenge instructions from your course to complete your analysis.
